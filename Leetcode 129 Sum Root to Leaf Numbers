"""
Creat a stack to save all the nodes along one branch.
Creat a set to save all the visited nodes.

There is four different situations when visiting one node being never visited
if left child exists and is not be visited:  (Priorly visit the left)
    push the left child into the stack
    continue the iteration
else: (No left child)
    add the root node into the set (consider the root as a visited one and immidiately visit the right part)
    if right child exists:
      push the right child into the stack
    else: (No right child)
      if left child does not exist: (No left and right child)
        root node is the leaf node
        output the number from the value of the nodes in the stack
       
      pop the top node (finish the visit for root)
"""

# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

class Solution:
    def sumNumbers(self, root: TreeNode) -> int:
        if not root:
            return 0

        total = 0
        number = 0
        stack = [root]
        visited = set()

        while stack:
            cur = stack[-1]
            if cur in visited:
                stack.pop(-1)
                continue
            
            if cur.left and (cur.left not in visited):
                stack.append(cur.left)
                continue
            else:
                visited.add(cur)
                if cur.right:
                    stack.append(cur.right)
                    continue
                else:
                    if not cur.left:
                        for i in range(len(stack)):
                            number += stack[i].val * (10 ** (len(stack)-i-1))
                        total += number
                        number = 0

                    stack.pop(-1)
        
        return total
        

